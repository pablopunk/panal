---
import { Icon } from "astro-icon/components";
import Layout from "../layouts/Layout.astro";
import Button from "../react/Button";
import Card from "../react/Card";
---

<Layout title="Terminal & Logs">
  <div class="mb-6">
    <h1 class="text-2xl font-bold">Terminal & Docker Logs</h1>
    <p class="text-gray-500 dark:text-gray-400">
      Host terminal access and Docker daemon logs
    </p>
  </div>

  <div class="flex flex-col md:flex-col lg:flex-row gap-6">
    <Card className="flex-1">
      <div
        id="terminal"
        class="h-[40vh] lg:h-[70vh] bg-black text-white font-mono text-sm p-4 rounded-md overflow-auto"
      >
        <div class="mb-2">Welcome to Panal Terminal</div>
        <div class="mb-2">Type 'help' for a list of available commands</div>
        <div class="flex">
          <span class="text-green-400">root@panal:~$</span>
          <input
            type="text"
            id="terminal-input"
            class="flex-1 bg-transparent border-none outline-none ml-2 text-white"
            autocomplete="off"
          />
        </div>
      </div>
    </Card>
    <Card className="flex-1" client:only="react">
      <div class="flex justify-end mb-4">
        <Button
          client:only="react"
          variant="outline"
          size="sm"
          id="refresh-logs"
        >
          <Icon name="lucide:refresh-cw" class="h-4 w-4 mr-1" />
          Refresh
        </Button>
      </div>
      <div
        id="logs"
        class="bg-gray-100 dark:bg-gray-800 p-4 rounded-md h-[40vh] lg:h-[70vh] font-mono text-sm overflow-auto"
      >
        <div id="logs-content" class="text-gray-500 whitespace-pre-wrap">
          Loading logs...
        </div>
      </div>
    </Card>
  </div>
</Layout>

<script>
  // Terminal logic
  const terminalInput = document.getElementById(
    "terminal-input"
  ) as HTMLInputElement;
  const terminal = document.getElementById("terminal");

  if (terminalInput && terminal) {
    terminalInput.focus();

    // Click anywhere in the terminal to focus the input
    terminal.addEventListener("click", () => {
      terminalInput.focus();
    });

    // Handle terminal input
    terminalInput.addEventListener("keydown", (e) => {
      if (e.key === "Enter") {
        const command = terminalInput.value;
        const outputLine = document.createElement("div");
        outputLine.innerHTML = `<span class="text-green-400">root@panal:~$</span> ${command}`;

        // Insert the command line before the input line
        terminal.insertBefore(outputLine, terminalInput.parentElement);

        // Process command (mock for now)
        if (command.trim()) {
          const responseElement = document.createElement("div");

          switch (command.trim()) {
            case "help":
              responseElement.textContent =
                "Available commands: help, ls, docker, clear";
              break;
            case "ls":
              responseElement.textContent = "app  config  logs  stacks";
              break;
            case "docker ps":
              responseElement.textContent =
                "CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES\n" +
                '123456789abc   nginx     "nginx"    2m ago    Up 2m    80/tcp    web-1';
              break;
            case "clear":
              // Clear all elements except the input line
              while (terminal.firstChild !== terminalInput.parentElement) {
                terminal.removeChild(terminal.firstChild as Node);
              }
              terminalInput.value = "";
              return;
            default:
              responseElement.textContent = `Command not found: ${command}`;
          }

          terminal.insertBefore(responseElement, terminalInput.parentElement);
        }

        // Clear input and scroll to bottom
        terminalInput.value = "";
        terminal.scrollTop = terminal.scrollHeight;
      }
    });
  }

  // Docker logs fetch logic
  async function fetchLogs() {
    const logsContent = document.getElementById("logs-content");
    if (logsContent) {
      logsContent.textContent = "Loading logs...";
      try {
        const res = await fetch("/api/docker-logs");
        if (res.ok) {
          const text = await res.text();
          logsContent.textContent = text || "No logs found.";
        } else {
          logsContent.textContent = "Failed to fetch logs.";
        }
      } catch {
        logsContent.textContent = "Failed to fetch logs.";
      }
    }
  }
  fetchLogs();

  // Logs refresh logic
  const refreshButton = document.getElementById("refresh-logs");
  const logsContainer = document.getElementById("logs");

  if (refreshButton && logsContainer) {
    refreshButton.addEventListener("click", () => {
      fetchLogs();
    });
  }
</script>
