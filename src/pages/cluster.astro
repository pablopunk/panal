---
import { Icon } from "astro-icon/components";
import Badge from "../components/Badge.astro";
import Card from "../components/Card.astro";
import Layout from "../layouts/Layout.astro";

// Mock data
import { getNodes } from "../lib/docker/nodes";
const nodes = await getNodes();
---

<Layout title="Cluster">
  <div class="mb-6">
    <h1 class="text-2xl font-bold">Cluster</h1>
    <p class="text-gray-500 dark:text-gray-400">Docker Swarm cluster overview</p>
  </div>

  <div class="grid gap-6">
    {nodes.map(node => (
      <Card>
        <div class="flex flex-col md:flex-row md:justify-between md:items-center gap-4">
          <div>
            <div class="flex items-center gap-2">
              <h3 class="text-lg font-medium">{node.hostname}</h3>
              <Badge variant={node.status === 'ready' ? 'success' : 'danger'}>
                {node.status}
              </Badge>
              {node.role === 'manager' && (
                <Badge variant="info">Manager</Badge>
              )}
              {node.leader && (
                <Badge variant="warning">Leader</Badge>
              )}
            </div>
            <div class="text-sm text-gray-500 dark:text-gray-400 mt-1">
              {node.id}
            </div>
          </div>
          
          <div class="grid grid-cols-3 gap-4">
            <div>
              <div class="text-sm font-medium">CPU</div>
              <div class="flex items-center mt-1">
                <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5">
                  <div class="bg-emerald-600 h-2.5 rounded-full" style={`width: ${node.cpu.usage}%`}></div>
                </div>
                <span class="ml-2 text-sm">{node.cpu.usage}%</span>
              </div>
            </div>
            
            <div>
              <div class="text-sm font-medium">Memory</div>
              <div class="flex items-center mt-1">
                <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5">
                  <div class="bg-emerald-600 h-2.5 rounded-full" style={`width: ${node.memory.usage}%`}></div>
                </div>
                <span class="ml-2 text-sm">{node.memory.usage}%</span>
              </div>
            </div>
            
            <div>
              <div class="text-sm font-medium">Disk</div>
              <div class="flex items-center mt-1">
                <div class="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5">
                  <div class="bg-emerald-600 h-2.5 rounded-full" style={`width: ${node.disk.usage}%`}></div>
                </div>
                <span class="ml-2 text-sm">{node.disk.usage}%</span>
              </div>
            </div>
          </div>
        </div>
        
        {node.services.length > 0 && (
          <div class="mt-4">
            <div class="text-sm font-medium mb-2">Services</div>
            <div class="flex flex-wrap gap-2">
              {node.services.map(service => (
                <div class="inline-flex items-center px-3 py-1 rounded-md bg-gray-100 dark:bg-gray-800 text-sm">
                  {service}
                </div>
              ))}
            </div>
          </div>
        )}
      </Card>
    ))}
  </div>
</Layout>
